@model RequisitionProject.Models.ViewModel.CreateRequisitionViewModel
@using System.Web
@{
    ViewData["Title"] = "Create Requisition";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Create New Requisition</h3>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" id="requisitionForm">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="Department" class="form-label">Department <span class="text-danger">*</span></label>
                                    <select asp-for="Department" asp-items="Model.Departments" class="form-select">
                                        <option value="">Select Department</option>
                                    </select>
                                    <span asp-validation-for="Department" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="Type" class="form-label">Type <span class="text-danger">*</span></label>
                                    <select asp-for="Type" class="form-select">
                                        <option value="">Select Type</option>
                                        <option value="1">Regular</option>
                                        <option value="2">Urgent</option>
                                    </select>
                                    <span asp-validation-for="Type" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="Purpose" class="form-label">Purpose <span class="text-danger">*</span></label>
                            <textarea asp-for="Purpose" class="form-control" rows="3" placeholder="Enter the purpose of this requisition"></textarea>
                            <span asp-validation-for="Purpose" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Remarks" class="form-label">Remarks</label>
                            <textarea asp-for="Remarks" class="form-control" rows="2" placeholder="Additional remarks (optional)"></textarea>
                            <span asp-validation-for="Remarks" class="text-danger"></span>
                        </div>

                        <hr>
                        <h4>Items <span class="text-danger">*</span></h4>
                        <div id="itemsContainer">
                            @for (int i = 0; i < Math.Max(1, Model.Items.Count); i++)
                            {
                                <div class="item-row" data-index="@i">
                                    <div class="row align-items-end">
                                        <div class="col-md-3">
                                            <label class="form-label">Product <span class="text-danger">*</span></label>
                                            <select asp-for="Items[i].ProductId" asp-items="Model.Products" class="form-select product-select" data-index="@i">
                                                <option value="">Select Product</option>
                                            </select>
                                            <span asp-validation-for="Items[i].ProductId" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">Quantity <span class="text-danger">*</span></label>
                                            <input asp-for="Items[i].Quantity" type="number" class="form-control" min="1" />
                                            <span asp-validation-for="Items[i].Quantity" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Purpose <span class="text-danger">*</span></label>
                                            <input asp-for="Items[i].Purpose" type="text" class="form-control" />
                                            <span asp-validation-for="Items[i].Purpose" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Remarks</label>
                                            <input asp-for="Items[i].Remarks" type="text" class="form-control" />
                                            <span asp-validation-for="Items[i].Remarks" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-1">
                                            <button type="button" class="btn btn-danger btn-sm remove-item" style="@(i == 0 ? "display:none;" : "")">Remove</button>
                                        </div>
                                    </div>
                                    <div class="product-info mt-2" style="display:none;">
                                        <small class="text-muted">Unit: <span class="unit"></span> | Price: $<span class="price"></span></small>
                                    </div>
                                    <hr>
                                </div>
                            }
                        </div>

                        <button type="button" id="addItem" class="btn btn-secondary mb-3">Add Another Item</button>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Create Requisition</button>
                            <a href="@Url.Action("Index")" class="btn btn-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>
        $(document).ready(function() {
            let itemIndex = @Math.Max(1, Model.Items.Count);

            // Function to get product options HTML
            function getProductOptionsHtml() {
                let options = '<option value="">Select Product</option>';
                @foreach (var product in Model.Products)
                {
                    <text>options += '<option value="@product.Value">@Html.Raw(HttpUtility.JavaScriptStringEncode(product.Text))</option>';</text>
                }
                return options;
            }

            // Add new item row
            $('#addItem').click(function() {
                let newRowHtml = `
                    <div class="item-row" data-index="${itemIndex}">
                        <div class="row align-items-end">
                            <div class="col-md-3">
                                <label class="form-label">Product <span class="text-danger">*</span></label>
                                <select name="Items[${itemIndex}].ProductId" class="form-select product-select" data-index="${itemIndex}">
                                    ${getProductOptionsHtml()}
                                </select>
                                <span class="text-danger field-validation-valid" data-valmsg-for="Items[${itemIndex}].ProductId" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Quantity <span class="text-danger">*</span></label>
                                <input name="Items[${itemIndex}].Quantity" type="number" class="form-control" min="1" value="" />
                                <span class="text-danger field-validation-valid" data-valmsg-for="Items[${itemIndex}].Quantity" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Purpose <span class="text-danger">*</span></label>
                                <input name="Items[${itemIndex}].Purpose" type="text" class="form-control" value="" />
                                <span class="text-danger field-validation-valid" data-valmsg-for="Items[${itemIndex}].Purpose" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Remarks</label>
                                <input name="Items[${itemIndex}].Remarks" type="text" class="form-control" value="" />
                                <span class="text-danger field-validation-valid" data-valmsg-for="Items[${itemIndex}].Remarks" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-danger btn-sm remove-item">Remove</button>
                            </div>
                        </div>
                        <div class="product-info mt-2" style="display:none;">
                            <small class="text-muted">Unit: <span class="unit"></span> | Price: $<span class="price"></span></small>
                        </div>
                        <hr>
                    </div>`;
                
                $('#itemsContainer').append(newRowHtml);
                
                // Re-parse the validators for the new elements
                $('form').removeData('validator').removeData('unobtrusiveValidation');
                $.validator.unobtrusive.parse('form');
                
                itemIndex++;
                updateRemoveButtons();
            });

            // Remove item row
            $(document).on('click', '.remove-item', function() {
                $(this).closest('.item-row').remove();
                updateRemoveButtons();
                reindexItems();
                
                // Re-parse validators after removing items
                $('form').removeData('validator').removeData('unobtrusiveValidation');
                $.validator.unobtrusive.parse('form');
            });

            // Get product details when product is selected
            $(document).on('change', '.product-select', function() {
                let productId = $(this).val();
                let row = $(this).closest('.item-row');
                let productInfo = row.find('.product-info');

                if (productId) {
                    $.get('@Url.Action("GetProductDetails")', { productId: productId })
                        .done(function(data) {
                            if (data.success) {
                                productInfo.find('.unit').text(data.data.unit);
                                productInfo.find('.price').text(data.data.unitPrice.toFixed(2));
                                productInfo.show();
                            }
                        })
                        .fail(function() {
                            productInfo.hide();
                        });
                } else {
                    productInfo.hide();
                }
            });

            function updateRemoveButtons() {
                let rows = $('.item-row');
                if (rows.length > 1) {
                    $('.remove-item').show();
                } else {
                    $('.remove-item').hide();
                }
            }

            function reindexItems() {
                $('.item-row').each(function(index) {
                    $(this).attr('data-index', index);
                    
                    // Update form field names and validation attributes
                    $(this).find('select, input').each(function() {
                        let name = $(this).attr('name');
                        if (name) {
                            let newName = name.replace(/\[\d+\]/, '[' + index + ']');
                            $(this).attr('name', newName);
                        }
                    });
                    
                    // Update validation attributes
                    $(this).find('span[data-valmsg-for]').each(function() {
                        let valmsgFor = $(this).attr('data-valmsg-for');
                        if (valmsgFor) {
                            let newValmsgFor = valmsgFor.replace(/\[\d+\]/, '[' + index + ']');
                            $(this).attr('data-valmsg-for', newValmsgFor);
                        }
                    });
                    
                    $(this).find('.product-select').attr('data-index', index);
                });
                
                // Update itemIndex to be the next available index
                itemIndex = $('.item-row').length;
            }

            // Form submission validation
            $('#requisitionForm').submit(function(e) {
                let hasValidItems = false;
                $('.item-row').each(function() {
                    let productId = $(this).find('.product-select').val();
                    let quantity = $(this).find('input[name*="Quantity"]').val();
                    if (productId && quantity && parseInt(quantity) > 0) {
                        hasValidItems = true;
                        return false; // break loop
                    }
                });

                if (!hasValidItems) {
                    alert('Please add at least one valid item with product and quantity.');
                    e.preventDefault();
                    return false;
                }
            });

            // Initialize remove buttons state
            updateRemoveButtons();
        });
    </script>
}